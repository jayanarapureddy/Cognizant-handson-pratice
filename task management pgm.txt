class Task {
    int taskId;
    String taskName;
    String status;

    public Task(int taskId, String taskName, String status) {
        this.taskId = taskId;
        this.taskName = taskName;
        this.status = status;
    }

    @Override
    public String toString() {
        return "Task{" +
                "ID=" + taskId +
                ", Name='" + taskName + '\'' +
                ", Status='" + status + '\'' +
                '}';
    }
}
class TaskNode {
    Task task;
    TaskNode next;

    public TaskNode(Task task) {
        this.task = task;
        this.next = null;
    }
}

class TaskManager {
    private TaskNode head;

    // Add Task to the end - O(n)
    public void addTask(Task task) {
        TaskNode newNode = new TaskNode(task);
        if (head == null) {
            head = newNode;
            System.out.println("Task added: " + task.taskName);
            return;
        }

        TaskNode current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
        System.out.println("Task added: " + task.taskName);
    }

    // Search Task by ID - O(n)
    public Task searchTaskById(int id) {
        TaskNode current = head;
        while (current != null) {
            if (current.task.taskId == id) {
                return current.task;
            }
            current = current.next;
        }
        return null;
    }

    // Delete Task by ID - O(n)
    public boolean deleteTask(int id) {
        if (head == null) return false;

        if (head.task.taskId == id) {
            head = head.next;
            return true;
        }

        TaskNode current = head;
        while (current.next != null && current.next.task.taskId != id) {
            current = current.next;
        }

        if (current.next == null) return false;

        current.next = current.next.next;
        return true;
    }

    // Traverse and Display All Tasks - O(n)
    public void displayTasks() {
        if (head == null) {
            System.out.println("No tasks available.");
            return;
        }

        System.out.println("Current Tasks:");
        TaskNode current = head;
        while (current != null) {
            System.out.println(current.task);
            current = current.next;
        }
    }
}
public class TaskManagementDemo {
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();

        // Add Tasks
        manager.addTask(new Task(1, "Design UI", "Pending"));
        manager.addTask(new Task(2, "Setup Database", "In Progress"));
        manager.addTask(new Task(3, "API Development", "Not Started"));

        // Display Tasks
        manager.displayTasks();

        // Search Task
        System.out.println("\nSearching for Task ID 2:");
        Task found = manager.searchTaskById(2);
        System.out.println(found != null ? found : "Task not found.");

        // Delete Task
        System.out.println("\nDeleting Task ID 1:");
        boolean deleted = manager.deleteTask(1);
        System.out.println(deleted ? "Task deleted." : "Task not found.");

        // Display After Deletion
        manager.displayTasks();
    }
}
